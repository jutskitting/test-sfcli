/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { dirname, join } from 'node:path';
import { fileURLToPath } from 'node:url';
import fs from 'node:fs/promises';
import debugCreator from 'debug';
import hb from 'handlebars';
const debug = debugCreator('commandreference');
hb.registerHelper('toUpperCase', (str) => str.toUpperCase());
hb.registerHelper('join', (array) => array.join(', '));
hb.registerHelper('xmlFile', (...strings) => {
    const parts = strings.filter((s) => typeof s === 'string');
    return Ditamap.file(parts.join('_'), 'xml');
});
hb.registerHelper('uniqueId', (...strings) => {
    const parts = strings.filter((s) => typeof s === 'string');
    return Ditamap.file(parts.join('_'), 'xml').replace('.xml', '');
});
/*
 * Returns true if the string should be formatted as code block in docs
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
hb.registerHelper('isCodeBlock', function (val, options) {
    return val.startsWith('sf') || val.startsWith('sfdx') || val.includes('$') || val.includes('>>')
        ? options.fn(this)
        : options.inverse(this);
});
hb.registerHelper('nextVersion', (value) => parseInt(value, 2) + 1);
export class Ditamap {
    filename;
    data;
    static SUFFIX = 'unified';
    static templatesDir = join(dirname(fileURLToPath(import.meta.url)), '..', '..', 'templates');
    static outputDir;
    static cliVersion;
    static plugins;
    static pluginVersions;
    static _suffix;
    destination;
    source;
    constructor(filename, data) {
        this.filename = filename;
        this.data = data;
        this.source = join(Ditamap.templatesDir, this.getTemplateFileName());
        this.destination = join(Ditamap.outputDir, filename);
    }
    static get suffix() {
        return Ditamap._suffix;
    }
    static set suffix(suffix) {
        Ditamap._suffix = suffix;
    }
    static file(name, ext) {
        return Ditamap.suffix ? `${name}_${Ditamap.suffix}.${ext}` : `${name}.${ext}`;
    }
    getFilename() {
        return this.filename;
    }
    getOutputFilePath() {
        return this.destination;
    }
    async write() {
        await fs.mkdir(dirname(this.destination), { recursive: true });
        const output = await this.transformToDitamap();
        await fs.writeFile(this.destination, output);
    }
    /**
     * Applies the named handlebars template to the supplied data
     *
     * @param data
     * @param templateName
     * @returns {object}
     */
    async transformToDitamap() {
        //
        debug(`Generating ${this.destination} from ${this.getTemplateFileName()}`);
        const src = await fs.readFile(this.source, 'utf8');
        const template = hb.compile(src, { noEscape: false });
        return template(this.data);
    }
}
//# sourceMappingURL=ditamap.js.map