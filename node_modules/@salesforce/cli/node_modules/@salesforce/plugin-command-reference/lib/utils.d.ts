/// <reference types="node" resolution-mode="require"/>
import { EventEmitter } from 'node:events';
import { Command, Interfaces } from '@oclif/core';
import { AnyJson } from '@salesforce/ts-types';
export type CommandClass = Pick<Command.Class, 'id' | 'hidden' | 'description' | 'plugin' | 'state' | 'examples' | 'summary' | 'flags' | 'pluginName'> & {
    topic: string;
    subtopic: string;
    longDescription?: string;
    binary: string;
    deprecated?: boolean;
};
export declare const events: EventEmitter<[never]>;
export declare function punctuate(description?: string): string | undefined;
export declare const replaceConfigVariables: (text: string, bin: string, id: string) => string;
export type CliMeta = {
    binary: string;
    topicSeparator?: string;
    state?: string;
    description?: string;
    longDescription?: string | AnyJson;
};
type PluginVersion = {
    name: string;
    version: string;
};
type BaseDitamapData = {
    namespaceDitamapFiles: string[];
};
type CliRefData = {
    cliVersion: string;
    pluginVersions: PluginVersion[];
};
type CliRefHelpData = {
    id: string;
};
type ClIRefTopicData = {
    topic: string;
    longDescription?: string;
};
export type CommandParameterData = {
    description: string[];
    optional?: boolean;
    char?: string;
    name: string;
    hasValue?: boolean;
    deprecated?: {
        version: string;
        to: string;
    };
    kind?: string;
    options?: string[];
    defaultFlagValue?: string;
    aliases?: string[];
};
export type DitamapData = CliRefHelpData | BaseDitamapData | CliRefData | ClIRefTopicData | CommandData | SfTopic | TopicDitamapData | undefined;
export type CommandData = {
    name: string;
    summary?: string;
    description?: string;
    binary: string;
    commandWithUnderscores: string;
    isClosedPilotCommand: boolean;
    isOpenPilotCommand: boolean;
    isBetaCommand: boolean;
    deprecated: boolean;
    trailblazerCommunityUrl?: string;
    trailblazerCommunityName?: string;
    help?: string[];
    examples?: unknown[];
    parameters?: CommandParameterData[];
};
type TopicDitamapData = {
    topic: string;
    commands: Array<{
        command: string;
    }>;
};
export type SfTopic = Interfaces.Topic & {
    external?: boolean;
    trailblazerCommunityLink?: {
        url: string;
        name: string;
    };
    subtopics?: SfTopics;
};
export type SfTopics = Map<string, SfTopic>;
export {};
