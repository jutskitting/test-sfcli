import { ComponentSet } from '@salesforce/source-deploy-retrieve';
import { Optional } from '@salesforce/ts-types';
import { SingleBar } from 'cli-progress';
import { SfCommand } from '@salesforce/sf-plugins-core';
import { EnsureFsFlagOptions } from './types.js';
export declare abstract class SourceCommand extends SfCommand<unknown> {
    static readonly DEFAULT_WAIT_MINUTES = 33;
    protected progressBar?: SingleBar;
    protected componentSet?: ComponentSet;
    protected initProgressBar(): void;
    /**
     * Sets an exit code on the process that marks success or failure
     * after successful command execution.
     *
     * @param code The exit code to set on the process.
     */
    protected setExitCode(code: number): void;
    protected getPackageDirs(): string[];
    protected getSourceApiVersion(): Promise<Optional<string>>;
    /**
     * Ensures command flags that are file system paths are set properly before
     * continuing command execution.  Can also create directories that don't yet
     * exist in the path.
     *
     * @param options defines the path to resolve and the expectations
     * @returns the resolved flag path
     */
    protected ensureFlagPath(options: EnsureFsFlagOptions): string;
    /**
     * Inspects the command response to determine success.
     *
     * NOTE: This is not about unexpected command errors such as timeouts,
     * or command flag parsing errors, but a successful
     * command execution's results. E.g., the deploy command
     * ran successfully but had ApexClass compilation errors,
     * so the deployment was unsuccessful.
     */
    protected abstract resolveSuccess(): void;
    /**
     * Formats the JSON returned by the command and optionally
     * (if --json is not set) displays output to the console.
     */
    protected abstract formatResult(): any;
}
export declare const resolveZipFileName: (zipFileName?: string) => string;
