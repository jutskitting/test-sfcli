"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zipDir = void 0;
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs = require("node:fs");
const path = require("node:path");
const JSZip = require("jszip");
const debug_1 = require("debug");
/**
 * Zip the contents of a directory to a file.
 *
 * @param config what and where to zip
 * @returns The created zip file path
 */
const zipDir = async (config) => {
    const debug = (0, debug_1.default)('testkit:zipDir');
    const { sourceDir, destDir, name } = config;
    const zipFilePath = path.join(destDir, name);
    const zip = new JSZip();
    debug(`Zipping contents of ${sourceDir} to ${zipFilePath}`);
    const zipDirRecursive = (dir) => {
        const dirents = fs.readdirSync(dir, { withFileTypes: true });
        for (const dirent of dirents) {
            const fullPath = path.resolve(dir, dirent.name);
            if (dirent.isDirectory()) {
                zipDirRecursive(fullPath);
            }
            else {
                const relPath = path.relative(sourceDir, fullPath);
                // Ensure only posix paths are added to zip files
                const relPosixPath = relPath.replace(/\\/g, '/');
                zip.file(relPosixPath, fs.createReadStream(fullPath));
            }
        }
    };
    zipDirRecursive(sourceDir);
    const zipBuf = await zip.generateAsync({
        type: 'nodebuffer',
        compression: 'DEFLATE',
        compressionOptions: { level: 3 },
    });
    fs.writeFileSync(zipFilePath, zipBuf);
    debug('Zip file written');
    return zipFilePath;
};
exports.zipDir = zipDir;
//# sourceMappingURL=zip.js.map