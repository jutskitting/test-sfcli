"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferExistingAuthToEnv = exports.getAuthStrategy = exports.testkitHubAuth = exports.prepareForAuthUrl = exports.prepareForJwt = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path = require("node:path");
const os = require("node:os");
const fs = require("node:fs");
const shell = require("shelljs");
const debug_1 = require("debug");
const kit_1 = require("@salesforce/kit");
const DEFAULT_INSTANCE_URL = 'https://login.salesforce.com';
/**
 * Function examines the env var TESTKIT_JWT_KEY to determine if it needs to be
 * reformatted so when saved to a file the RSA key file contents are formatted
 * properly.
 *
 * Throws an error if function is called and the env var is undefined
 *
 * returns a string that complies with RSA private key file format
 */
const formatJwtKey = () => {
    if (kit_1.env.getString('TESTKIT_JWT_KEY')) {
        const jwtKey = kit_1.env.getString('TESTKIT_JWT_KEY');
        let keyLines = jwtKey.split(os.EOL);
        if (keyLines.length <= 1) {
            const footer = '-----END RSA PRIVATE KEY-----';
            const header = '-----BEGIN RSA PRIVATE KEY-----';
            // strip out header, footer and spaces
            const newKeyContents = jwtKey.replace(header, '').replace(footer, '').replace(/\s/g, '');
            // one big string, split into 64 byte chucks
            // const chunks = newKeyContents.match(/.{1,64}/g) as string[];
            keyLines = [header, ...newKeyContents.match(/.{1,64}/g), footer];
        }
        return keyLines.join('\n');
    }
    else {
        throw new Error('env var TESTKIT_JWT_KEY is undefined');
    }
};
const prepareForJwt = (homeDir) => {
    const jwtKey = path.join(homeDir, 'jwtKey');
    fs.writeFileSync(jwtKey, formatJwtKey());
    return jwtKey;
};
exports.prepareForJwt = prepareForJwt;
const prepareForAuthUrl = (homeDir) => {
    const tmpUrl = path.join(homeDir, 'tmpUrl');
    fs.writeFileSync(tmpUrl, kit_1.env.getString('TESTKIT_AUTH_URL', ''));
    return tmpUrl;
};
exports.prepareForAuthUrl = prepareForAuthUrl;
/**
 * Inspects the environment (via AuthStrategy) and authenticates to a devhub via JWT or AuthUrl
 * Sets the hub as default for use in tests
 *
 * @param homeDir the testSession directory where credential files will be written
 * @param authStrategy the authorization method to use
 *
 * reads environment variables that are set by the user OR via transferExistingAuthToEnv
 *   for jwt: TESTKIT_HUB_USERNAME, TESTKIT_JWT_CLIENT_ID, TESTKIT_JWT_KEY
 *     optional but recommended: TESTKIT_HUB_INSTANCE
 *   required for AuthUrl: TESTKIT_AUTH_URL
 */
const testkitHubAuth = (homeDir, authStrategy = (0, exports.getAuthStrategy)()) => {
    const logger = (0, debug_1.debug)('testkit:authFromStubbedHome');
    const execOpts = { silent: true };
    const shellOverride = kit_1.env.getString('TESTKIT_EXEC_SHELL');
    if (shellOverride) {
        execOpts.shell = shellOverride;
    }
    if (authStrategy === 'JWT') {
        logger('trying jwt auth');
        const jwtKey = (0, exports.prepareForJwt)(homeDir);
        const results = shell.exec(`sf org:login:jwt --set-default-dev-hub --username ${kit_1.env.getString('TESTKIT_HUB_USERNAME', '')} --client-id ${kit_1.env.getString('TESTKIT_JWT_CLIENT_ID', '')} --jwt-key-file ${jwtKey} --instance-url ${kit_1.env.getString('TESTKIT_HUB_INSTANCE', DEFAULT_INSTANCE_URL)}`, execOpts);
        if (results.code !== 0) {
            throw new Error(`jwt:grant for org ${kit_1.env.getString('TESTKIT_HUB_USERNAME', 'TESTKIT_HUB_USERNAME was not set')} failed with exit code: ${results.code}\n ${results.stdout + results.stderr}`);
        }
        return;
    }
    if (authStrategy === 'AUTH_URL') {
        logger('trying to authenticate with AuthUrl');
        const tmpUrl = (0, exports.prepareForAuthUrl)(homeDir);
        const shellOutput = shell.exec(`sf org:login:sfdx-url -d -f ${tmpUrl}`, execOpts);
        logger(shellOutput);
        if (shellOutput.code !== 0) {
            throw new Error(`org:login:sfdx-url for url ${tmpUrl} failed with exit code: ${shellOutput.code}\n ${shellOutput.stdout + shellOutput.stderr}`);
        }
        return;
    }
    logger('no hub configured');
};
exports.testkitHubAuth = testkitHubAuth;
const getAuthStrategy = () => {
    if (kit_1.env.getString('TESTKIT_JWT_CLIENT_ID') &&
        kit_1.env.getString('TESTKIT_HUB_USERNAME') &&
        kit_1.env.getString('TESTKIT_JWT_KEY')) {
        return 'JWT';
    }
    // you provided a username but not an auth url, so you must already have an auth that you want to re-use
    if (kit_1.env.getString('TESTKIT_HUB_USERNAME') && !kit_1.env.getString('TESTKIT_AUTH_URL')) {
        return 'REUSE';
    }
    // auth url alone
    if (kit_1.env.getString('TESTKIT_AUTH_URL')) {
        return 'AUTH_URL';
    }
    return 'NONE';
};
exports.getAuthStrategy = getAuthStrategy;
/**
 * For scenarios where a hub has already been authenticated in the environment and the username is provided,
 * set the environment variables from the existing hub's information.
 *
 * reads environment variables
 *   TESTKIT_HUB_USERNAME : the username (not alias) of a devHub
 *
 * write environment variables
 *  TESTKIT_AUTH_URL (if using refreshToken)
 *  TESTKIT_JWT_KEY,TESTKIT_JWT_CLIENT_ID,TESTKIT_HUB_INSTANCE (if using jwt)
 *
 */
const transferExistingAuthToEnv = (authStrategy) => {
    if (authStrategy !== 'REUSE')
        return;
    const logger = (0, debug_1.debug)('testkit:transferExistingAuthToEnv');
    const devhub = kit_1.env.getString('TESTKIT_HUB_USERNAME', '');
    logger(`reading ${devhub}.json`);
    const authFileName = `${devhub}.json`;
    const hubAuthFileSource = path.join(kit_1.env.getString('HOME') ?? os.homedir(), '.sfdx', authFileName);
    const authFileContents = JSON.parse(fs.readFileSync(hubAuthFileSource, 'utf-8'));
    if (authFileContents.privateKey) {
        logger('copying variables to env from AuthFile for JWT');
        // this is jwt.  set the appropriate env vars
        kit_1.env.setString('TESTKIT_JWT_KEY', fs.readFileSync(authFileContents.privateKey, 'utf-8'));
        kit_1.env.setString('TESTKIT_JWT_CLIENT_ID', authFileContents.clientId);
        kit_1.env.setString('TESTKIT_HUB_INSTANCE', authFileContents.instanceUrl);
        return;
    }
    if (authFileContents.refreshToken) {
        const execOpts = { silent: true, fatal: true };
        const shellOverride = kit_1.env.getString('TESTKIT_EXEC_SHELL');
        if (shellOverride) {
            execOpts.shell = shellOverride;
        }
        // this is an org from web:auth or auth:url.  Generate the authUrl and set in the env
        logger('copying variables to env from org:display for AuthUrl');
        const displayContents = JSON.parse(shell.exec(`sf org:display -u ${devhub} --verbose --json`, execOpts));
        logger(`found ${displayContents.result.sfdxAuthUrl}`);
        kit_1.env.setString('TESTKIT_AUTH_URL', displayContents.result.sfdxAuthUrl);
        return;
    }
    throw new Error(`Unable to reuse existing hub ${devhub}.  Check file ${devhub}.json`);
};
exports.transferExistingAuthToEnv = transferExistingAuthToEnv;
//# sourceMappingURL=hubAuth.js.map