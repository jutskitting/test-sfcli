import { StatusEvent, ResultEvent, SandboxProcessObject } from '@salesforce/core';
import { StagedProgress } from './stagedProgress.js';
export type SandboxProgressData = {
    id: string;
    status: string;
    percentComplete?: number;
    remainingWaitTime: number;
    remainingWaitTimeHuman: string;
};
export type SandboxStatusData = {
    sandboxUsername: string;
    sandboxProgress: SandboxProgressData;
    sandboxProcessObj?: SandboxProcessObject | undefined;
};
export type SandboxProgressConfig = {
    stageNames?: string[];
    action?: 'Create' | 'Refresh' | 'Create/Refresh';
};
export declare class SandboxProgress extends StagedProgress<SandboxStatusData> {
    action: SandboxProgressConfig['action'];
    constructor(config?: SandboxProgressConfig);
    getLogSandboxProcessResult(result: ResultEvent): string;
    getSandboxProgress(event: StatusEvent | (Omit<ResultEvent, 'sandboxRes'> & {
        sandboxRes?: ResultEvent['sandboxRes'];
    })): SandboxProgressData;
    formatProgressStatus(withClock?: boolean): string;
    protected mapCurrentStage(currentStage: string): string;
}
export declare const getTableDataFromProcessObj: (sandboxProcessObj: SandboxProcessObject, authUserName?: string | undefined) => Array<{
    key: string;
    value: string | number;
}>;
export declare const getSandboxTableAsText: (sandboxUsername?: string, sandboxProgress?: SandboxProcessObject) => string[];
