import { SfCommand } from '@salesforce/sf-plugins-core';
import { Config } from '@oclif/core';
import { Lifecycle, Org, ResultEvent, SandboxProcessObject, SandboxRequestCache, SandboxRequestCacheEntry, SandboxUserAuthResponse, StatusEvent } from '@salesforce/core';
import { SandboxProgress } from './sandboxProgress.js';
import { State } from './stagedProgress.js';
export type SandboxCommandResponse = SandboxProcessObject & {
    SandboxUsername?: string;
};
export declare abstract class SandboxCommandBase<T> extends SfCommand<T> {
    protected sandboxProgress: SandboxProgress;
    protected latestSandboxProgressObj?: SandboxProcessObject;
    protected sandboxAuth?: SandboxUserAuthResponse;
    protected prodOrg?: Org;
    protected pollingTimeOut: boolean;
    protected sandboxRequestConfig: SandboxRequestCache;
    protected sandboxRequestData: SandboxRequestCacheEntry | undefined;
    protected action: 'Create' | 'Refresh' | 'Create/Refresh';
    protected sandboxUsername?: string;
    constructor(argv: string[], config: Config);
    protected getSandboxRequestConfig(): Promise<SandboxRequestCache>;
    protected calculateTrackingSetting(tracking?: boolean): Promise<boolean>;
    protected registerLifecycleListeners(lifecycle: Lifecycle, options: {
        isAsync: boolean;
        alias?: string;
        setDefault?: boolean;
        prodOrg?: Org;
        tracksSource?: boolean;
    }): void;
    protected reportResults(results: ResultEvent): void;
    protected updateProgress(event: StatusEvent | (Omit<ResultEvent, 'sandboxRes'> & {
        sandboxRes?: ResultEvent['sandboxRes'];
    }), isAsync: boolean): void;
    protected updateStage(stage: string | undefined, state: State): void;
    protected updateSandboxRequestData(): void;
    protected saveSandboxProgressConfig(): void;
    protected getSandboxName(): string | undefined;
    protected getSandboxUsername(prodOrgUsername: string, sandboxName: string): string;
    protected getSandboxCommandResponse(): SandboxCommandResponse;
    protected finally(_: Error | undefined): Promise<any>;
    private removeSandboxProgressConfig;
    protected abstract getCheckSandboxStatusParams(): string[];
}
