import Interfaces from '@oclif/core/interfaces';
import { SfCommand } from '@salesforce/sf-plugins-core';
import { AuthFields, OrgTypes, SandboxProcessObject, ScratchOrgInfo } from '@salesforce/core';
export type ScratchOrgProcessObject = {
    username?: string;
    scratchOrgInfo: ScratchOrgInfo;
    authFields?: AuthFields;
    warnings: string[];
    orgId: string;
};
export type CreateResult = ScratchOrgProcessObject | SandboxProcessObject;
export declare class Create extends SfCommand<CreateResult> {
    static readonly summary: string;
    static readonly description: string;
    static readonly examples: string[];
    static state: string;
    static readonly hidden = true;
    static deprecationOptions: {
        message: string;
    };
    static readonly strict = false;
    static readonly flags: {
        'target-org': {
            summary: string;
            name: string;
            char?: Interfaces.AlphabetLowercase | Interfaces.AlphabetUppercase;
            description?: string;
            helpLabel?: string;
            helpGroup?: string;
            env?: string;
            hidden?: boolean;
            required?: boolean;
            dependsOn?: string[];
            exclusive?: string[];
            exactlyOne?: string[];
            relationships?: import("node_modules/@oclif/core/lib/interfaces/parser.js").Relationship[];
            deprecated?: true | Interfaces.Deprecation;
            aliases?: string[];
            charAliases?: (Interfaces.AlphabetLowercase | Interfaces.AlphabetUppercase)[];
            deprecateAliases?: boolean;
            noCacheDefault?: boolean;
            type: "option";
            helpValue?: string | string[];
            options?: readonly string[];
            multiple?: boolean;
            multipleNonGreedy?: boolean;
            delimiter?: ",";
            allowStdin?: boolean | "only";
            parse: import("node_modules/@oclif/core/lib/interfaces/parser.js").FlagParser<import("@salesforce/core").Org | undefined, string, Interfaces.CustomOptions>;
            defaultHelp?: import("node_modules/@oclif/core/lib/interfaces/parser.js").FlagDefaultHelp<import("@salesforce/core").Org, Interfaces.CustomOptions> | undefined;
            input: string[];
            default?: import("node_modules/@oclif/core/lib/interfaces/parser.js").FlagDefault<import("@salesforce/core").Org | undefined, Interfaces.CustomOptions>;
        };
        'target-dev-hub': Interfaces.OptionFlag<import("@salesforce/core").Org | undefined, Interfaces.CustomOptions>;
        'api-version': Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        loglevel: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        type: Interfaces.OptionFlag<OrgTypes, Interfaces.CustomOptions>;
        definitionfile: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        nonamespace: Interfaces.BooleanFlag<boolean>;
        noancestors: Interfaces.BooleanFlag<boolean>;
        clientid: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        setdefaultusername: Interfaces.BooleanFlag<boolean>;
        setalias: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        wait: Interfaces.OptionFlag<import("@salesforce/kit").Duration, Interfaces.CustomOptions>;
        durationdays: Interfaces.OptionFlag<number, Interfaces.CustomOptions>;
        retry: Interfaces.OptionFlag<number, Interfaces.CustomOptions>;
    };
    private sandboxAuth?;
    private logger;
    private varArgs;
    private flags;
    run(): Promise<CreateResult>;
    private validateSandboxFlags;
    private createSandbox;
    private createScratchOrg;
}
