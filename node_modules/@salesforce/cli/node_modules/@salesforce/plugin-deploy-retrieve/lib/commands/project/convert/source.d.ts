import { ConvertResult } from '@salesforce/source-deploy-retrieve';
import { SfCommand } from '@salesforce/sf-plugins-core';
import { Interfaces } from '@oclif/core';
import { ConvertResultJson } from '../../../utils/types.js';
export declare class Source extends SfCommand<ConvertResultJson> {
    static readonly summary: string;
    static readonly description: string;
    static readonly examples: string[];
    static readonly requiresProject = true;
    static readonly aliases: string[];
    static readonly deprecateAliases = true;
    static readonly flags: {
        'api-version': {
            summary: string;
            name: string;
            char?: Interfaces.AlphabetLowercase | Interfaces.AlphabetUppercase;
            description?: string;
            helpLabel?: string;
            helpGroup?: string;
            env?: string;
            hidden?: boolean;
            required?: boolean;
            dependsOn?: string[];
            exclusive?: string[];
            exactlyOne?: string[];
            relationships?: import("node_modules/@oclif/core/lib/interfaces/parser.js").Relationship[];
            deprecated?: true | Interfaces.Deprecation;
            aliases?: string[];
            charAliases?: (Interfaces.AlphabetLowercase | Interfaces.AlphabetUppercase)[];
            deprecateAliases?: boolean;
            noCacheDefault?: boolean;
            type: "option";
            helpValue?: string | string[];
            options?: readonly string[];
            multiple?: boolean;
            multipleNonGreedy?: boolean;
            delimiter?: ",";
            allowStdin?: boolean | "only";
            parse: import("node_modules/@oclif/core/lib/interfaces/parser.js").FlagParser<string | undefined, string, Interfaces.CustomOptions>;
            defaultHelp?: import("node_modules/@oclif/core/lib/interfaces/parser.js").FlagDefaultHelp<string | undefined, Interfaces.CustomOptions>;
            input: string[];
            default?: import("node_modules/@oclif/core/lib/interfaces/parser.js").FlagDefault<string | undefined, Interfaces.CustomOptions>;
        };
        loglevel: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        'root-dir': Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        'output-dir': Interfaces.OptionFlag<string, Interfaces.CustomOptions>;
        'package-name': Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        manifest: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        'source-dir': Interfaces.OptionFlag<string[] | undefined, Interfaces.CustomOptions>;
        metadata: Interfaces.OptionFlag<string[] | undefined, Interfaces.CustomOptions>;
    };
    protected convertResult: ConvertResult;
    private flags;
    private componentSet;
    run(): Promise<ConvertResultJson>;
    protected convert(): Promise<void>;
    protected resolveSuccess(): void;
    protected formatResult(): Promise<ConvertResultJson>;
}
